{"version":3,"sources":["src/services/sendmail.js","src/services/sendmail.ts"],"names":["nodemailer","require","smtpTransport","handlebars","path","fs","SendMail","constructor","mailConfig","options","host","getHost","port","getPort","auth","user","getUser","pass","getPassword","transporter","createTransport","sendForgotEmail","name","email","url","generateHtml","TpEMail","forgot","then","html","sendMail","sendConfirmationEmail","confirmation","to","subject","from","getFrom","getEmail","type","chooseTemplate","t","join","getLayoutPath","readFileAsync","template","compile","result","exports"],"mappings":"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","file":"sendmail.js","sourcesContent":["\"use strict\";\nconst nodemailer = require('nodemailer');\nconst smtpTransport = require('nodemailer-smtp-transport');\nconst handlebars = require('handlebars');\nconst path = require('path');\nconst fs = require('fs-extra-promise');\nclass SendMail {\n    constructor(mailConfig) {\n        this.mailConfig = mailConfig;\n        const options = {\n            host: this.mailConfig.getHost(),\n            port: this.mailConfig.getPort(),\n            auth: {\n                user: this.mailConfig.getUser(),\n                pass: this.mailConfig.getPassword()\n            }\n        };\n        this.transporter = nodemailer.createTransport(smtpTransport(options));\n    }\n    sendForgotEmail(name, email, url) {\n        return this.generateHtml(name, email, url, TpEMail.forgot).then((html) => {\n            return this.sendMail(email, 'Recuperação de senha', html);\n        });\n    }\n    sendConfirmationEmail(email, url) {\n        return this.generateHtml('', email, url, TpEMail.confirmation).then((html) => {\n            return this.sendMail(email, 'Confirmação de Cadastro', html);\n        });\n    }\n    sendMail(to, subject, html) {\n        const options = {\n            // from === nome da empresa\n            from: `${this.mailConfig.getFrom()} <${this.mailConfig.getEmail()}>`,\n            // para quem o email será enviado\n            to: to,\n            // assunto do email\n            subject: subject,\n            // corpo do email\n            html: html\n        };\n        return this.transporter.sendMail(options);\n    }\n    generateHtml(name, email, url, type) {\n        let chooseTemplate = (t) => {\n            if (t === TpEMail.confirmation) {\n                return path.join(this.mailConfig.getLayoutPath(), `confirmation.hbs`);\n            }\n            else {\n                return path.join(this.mailConfig.getLayoutPath(), `forgot.hbs`);\n            }\n        };\n        return fs.readFileAsync((chooseTemplate(type)), 'utf-8')\n            .then((html) => {\n            let template = handlebars.compile(html);\n            let result = template({ name: name, email: email, url: url });\n            return result;\n        });\n    }\n}\nexports.SendMail = SendMail;\n(function (TpEMail) {\n    TpEMail[TpEMail[\"confirmation\"] = 0] = \"confirmation\";\n    TpEMail[TpEMail[\"forgot\"] = 1] = \"forgot\";\n})(exports.TpEMail || (exports.TpEMail = {}));\nvar TpEMail = exports.TpEMail;\n","import {MailConfig} from '../config/mail-config'\nimport * as nodemailer from 'nodemailer'\nimport * as smtpTransport from 'nodemailer-smtp-transport'\nimport * as handlebars from 'handlebars'\nimport * as path from 'path'\nimport * as fs from 'fs-extra-promise'\nimport * as Bluebird from 'bluebird'\nexport class SendMail {\n    private transporter: nodemailer.Transporter\n    private mailConfig: MailConfig\n    constructor(mailConfig: MailConfig) {\n        this.mailConfig = mailConfig\n        const options = {\n            host: this.mailConfig.getHost(),\n            port: this.mailConfig.getPort(),\n            auth: {\n                user: this.mailConfig.getUser(),\n                pass: this.mailConfig.getPassword()\n            }\n        }\n        this.transporter = nodemailer.createTransport(smtpTransport(options))\n    }\n\n    public sendForgotEmail (name: string, email: string, url: string): Bluebird<any> {\n        return this.generateHtml(name, email, url, TpEMail.forgot).then((html: string) => {\n            return this.sendMail(email,'Recuperação de senha', html)\n        })\n    }\n\n    public sendConfirmationEmail (email: string, url: string): Bluebird<any> {\n        return this.generateHtml('', email, url, TpEMail.confirmation).then((html: string) => {\n            return this.sendMail(email,'Confirmação de Cadastro', html)\n        })\n    }\n\n    private sendMail(to: string, subject: string, html: string) {\n        const options: nodemailer.SendMailOptions = {\n            // from === nome da empresa\n            from: `${this.mailConfig.getFrom()} <${this.mailConfig.getEmail()}>`,\n            // para quem o email será enviado\n            to,\n            // assunto do email\n            subject,\n            // corpo do email\n            html\n        }\n        return this.transporter.sendMail(options)\n    }\n\n    private generateHtml(name: string, email: string, url: string, type: TpEMail) {\n        let chooseTemplate = (t: TpEMail) => {\n            if (t === TpEMail.confirmation) {\n                return path.join( this.mailConfig.getLayoutPath() , `confirmation.hbs`)\n            } else {\n                return path.join( this.mailConfig.getLayoutPath() , `forgot.hbs`)\n            }\n        }\n\n        return fs.readFileAsync((chooseTemplate(type)), 'utf-8')\n            .then((html: string) => {\n                let template = handlebars.compile(html)\n                let result = template({name: name, email: email, url: url})\n                return result\n            })\n    }\n\n}\n\nexport enum TpEMail {\n    confirmation,\n    forgot\n}\n"]}