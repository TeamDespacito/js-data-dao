{"version":3,"sources":["src/controllers/forgot-controller.js","src/controllers/forgot-controller.ts"],"names":["forgot_dao_1","require","services_1","ForgotController","constructor","store","mailConfig","appConfig","forgot","ForgotDAO","sendMail","req","res","next","sendForgotMail","body","then","status","catch","err","APIError","validaToken","params","dados","resetPassword","exports"],"mappings":"AAAA;;ACCA,MAAAA,eAAAC,QAA0B,sBAA1B,CAAA;AACA,MAAAC,aAAAD,QAAyB,aAAzB,CAAA;AAKA,MAAAE,gBAAA,CAAA;AAGIC,gBAAYC,KAAZ,EAA8BC,UAA9B,EAAsDC,SAAtD,EAA0E;AACtE,aAAKC,MAAL,GAAc,IAAIR,aAAAS,SAAJ,CAAcJ,KAAd,EAAoBC,UAApB,EAA+BC,SAA/B,CAAd;AACH;AAED;;;;;;;;;;AAUOG,aAASC,GAAT,EAAuBC,GAAvB,EAAsCC,IAAtC,EAAyD;AAC5D,eAAO,KAAKL,MAAL,CAAYM,cAAZ,CAA2BH,IAAII,IAA/B,EACFC,IADE,CACG,MAAA;AACFJ,gBAAIK,MAAJ,CAAW,GAAX;AACA,mBAAO,eAAP;AACH,SAJE,EAKFC,KALE,CAKKC,GAAD,IAAS;AACZ,kBAAM,IAAIjB,WAAAkB,QAAJ,CAAaD,GAAb,EAAkB,GAAlB,CAAN;AACH,SAPE,CAAP;AAQH;AAED;;;;;;;;;;AAUOE,gBAAYV,GAAZ,EAA0BC,GAA1B,EAAyCC,IAAzC,EAA2D;AAC9D,eAAO,KAAKL,MAAL,CAAYa,WAAZ,CAAwBV,IAAIW,MAA5B,EACFN,IADE,CACIO,KAAD,IAAW;AACbX,gBAAIK,MAAJ,CAAW,GAAX;AACA,mBAAOM,KAAP;AACH,SAJE,EAKFL,KALE,CAKKC,GAAD,IAAS;AACZ,kBAAM,IAAIjB,WAAAkB,QAAJ,CAAaD,GAAb,EAAkB,GAAlB,CAAN;AACH,SAPE,CAAP;AAQH;AAED;;;;;;;;;;AAUOK,kBAAcb,GAAd,EAA4BC,GAA5B,EAA2CC,IAA3C,EAA6D;AAChE,eAAO,KAAKL,MAAL,CAAYgB,aAAZ,CAA0Bb,IAAIW,MAA9B,EAAsCX,IAAII,IAA1C,EACFC,IADE,CACIO,KAAD,IAAW;AACbX,gBAAIK,MAAJ,CAAW,GAAX;AACA,mBAAOM,KAAP;AACH,SAJE,EAKFL,KALE,CAKKC,GAAD,IAAS;AACZ,kBAAM,IAAIjB,WAAAkB,QAAJ,CAAaD,GAAb,EAAkB,GAAlB,CAAN;AACH,SAPE,CAAP;AAQH;AApEL;AAAaM,QAAAtB,gBAAA,GAAgBA,gBAAhB","file":"forgot-controller.js","sourcesContent":["\"use strict\";\nconst forgot_dao_1 = require('../models/forgot-dao');\nconst services_1 = require('../services');\nclass ForgotController {\n    constructor(store, mailConfig, appConfig) {\n        this.forgot = new forgot_dao_1.ForgotDAO(store, mailConfig, appConfig);\n    }\n    /**\n     * Envia um email para resetar a senha do usuário que a esqueceu\n     *\n     * @param {Request} req\n     * @param {Response} res\n     * @param {NextFunction} [next]\n     * @returns {JSData.JSDataPromise<IUser>}\n     *\n     * @memberOf ForgotController\n     */\n    sendMail(req, res, next) {\n        return this.forgot.sendForgotMail(req.body)\n            .then(() => {\n            res.status(200);\n            return 'Email enviado';\n        })\n            .catch((err) => {\n            throw new services_1.APIError(err, 400);\n        });\n    }\n    /**\n     * Valida o token do parâmetro\n     *\n     * @param {Request} req\n     * @param {Response} res\n     * @param {NextFunction} next\n     * @returns {JSData.JSDataPromise<any>}\n     *\n     * @memberOf ForgotController\n     */\n    validaToken(req, res, next) {\n        return this.forgot.validaToken(req.params)\n            .then((dados) => {\n            res.status(200);\n            return dados;\n        })\n            .catch((err) => {\n            throw new services_1.APIError(err, 401);\n        });\n    }\n    /**\n     * Verifica o token e reseta a senha do usuário\n     *\n     * @param {Request} req\n     * @param {Response} res\n     * @param {NextFunction} next\n     * @returns {JSData.JSDataPromise<any>}\n     *\n     * @memberOf ForgotController\n     */\n    resetPassword(req, res, next) {\n        return this.forgot.resetPassword(req.params, req.body)\n            .then((dados) => {\n            res.status(200);\n            return dados;\n        })\n            .catch((err) => {\n            throw new services_1.APIError(err, 401);\n        });\n    }\n}\nexports.ForgotController = ForgotController;\n","import { Request, Response, NextFunction } from 'express'\nimport { ForgotDAO } from '../models/forgot-dao'\nimport { APIError } from '../services'\nimport {AppConfig} from '../config/app-config'\nimport {MailConfig} from '../config/mail-config'\nimport * as JSData from 'js-data'\n\nexport class ForgotController {\n    forgot: ForgotDAO\n\n    constructor(store: JSData.DS, mailConfig: MailConfig, appConfig: AppConfig) {\n        this.forgot = new ForgotDAO(store,mailConfig,appConfig)\n    }\n\n    /**\n     * Envia um email para resetar a senha do usuário que a esqueceu\n     * \n     * @param {Request} req\n     * @param {Response} res\n     * @param {NextFunction} [next]\n     * @returns {JSData.JSDataPromise<IUser>}\n     * \n     * @memberOf ForgotController\n     */\n    public sendMail(req: Request, res: Response, next?: NextFunction): JSData.JSDataPromise<any> {\n        return this.forgot.sendForgotMail(req.body)\n            .then(() => {\n                res.status(200)\n                return 'Email enviado'\n            })\n            .catch((err: any) => {\n                throw new APIError(err, 400)\n            })\n    }\n\n    /**\n     * Valida o token do parâmetro\n     * \n     * @param {Request} req\n     * @param {Response} res\n     * @param {NextFunction} next\n     * @returns {JSData.JSDataPromise<any>}\n     * \n     * @memberOf ForgotController\n     */\n    public validaToken(req: Request, res: Response, next: NextFunction): JSData.JSDataPromise<any> {\n        return this.forgot.validaToken(req.params)\n            .then((dados: any) => {\n                res.status(200)\n                return dados\n            })\n            .catch((err: any) => {\n                throw new APIError(err, 401)\n            })\n    }\n\n    /**\n     * Verifica o token e reseta a senha do usuário\n     * \n     * @param {Request} req\n     * @param {Response} res\n     * @param {NextFunction} next\n     * @returns {JSData.JSDataPromise<any>}\n     * \n     * @memberOf ForgotController\n     */\n    public resetPassword(req: Request, res: Response, next: NextFunction): JSData.JSDataPromise<any> {\n        return this.forgot.resetPassword(req.params, req.body)\n            .then((dados: any) => {\n                res.status(200)\n                return dados\n            })\n            .catch((err: any) => {\n                throw new APIError(err, 401)\n            })\n    }\n}\n"]}