{"version":3,"sources":["src/controllers/signup-controller.js","src/controllers/signup-controller.ts"],"names":["signup_dao_1","require","services_1","SignupController","constructor","store","mailConfig","appConfig","Signup","SignUpDAO","validaToken","req","res","next","params","then","dados","status","catch","err","APIError","registerPassword","body","exports"],"mappings":"AAAA;;ACCA,MAAAA,eAAAC,QAA0B,sBAA1B,CAAA;AACA,MAAAC,aAAAD,QAAyB,aAAzB,CAAA;AAKA,MAAAE,gBAAA,CAAA;AAGIC,gBAAYC,KAAZ,EAA8BC,UAA9B,EAAsDC,SAAtD,EAA0E;AACtE,aAAKC,MAAL,GAAc,IAAIR,aAAAS,SAAJ,CAAcJ,KAAd,EAAoBE,SAApB,EAA8BD,UAA9B,CAAd;AACH;AAED;;;;;;;;;;AAUOI,gBAAYC,GAAZ,EAA0BC,GAA1B,EAAyCC,IAAzC,EAA2D;AAC9D,eAAO,KAAKL,MAAL,CAAYE,WAAZ,CAAwBC,IAAIG,MAA5B,EACFC,IADE,CACIC,KAAD,IAAW;AACbJ,gBAAIK,MAAJ,CAAW,GAAX;AACA,mBAAOD,KAAP;AACH,SAJE,EAKFE,KALE,CAKKC,GAAD,IAAS;AACZ,kBAAM,IAAIjB,WAAAkB,QAAJ,CAAaD,GAAb,EAAkB,GAAlB,CAAN;AACH,SAPE,CAAP;AAQH;AAED;;;;;;;;;;AAUOE,qBAAiBV,GAAjB,EAA+BC,GAA/B,EAA8CC,IAA9C,EAAgE;AACnE,eAAO,KAAKL,MAAL,CAAYa,gBAAZ,CAA6BV,IAAIG,MAAjC,EAAyCH,IAAIW,IAA7C,EACFP,IADE,CACIC,KAAD,IAAW;AACbJ,gBAAIK,MAAJ,CAAW,GAAX;AACA,mBAAOD,KAAP;AACH,SAJE,EAKFE,KALE,CAKKC,GAAD,IAAS;AACZ,kBAAM,IAAIjB,WAAAkB,QAAJ,CAAaD,GAAb,EAAkB,GAAlB,CAAN;AACH,SAPE,CAAP;AAQH;AA/CL;AAAaI,QAAApB,gBAAA,GAAgBA,gBAAhB","file":"signup-controller.js","sourcesContent":["\"use strict\";\nconst signup_dao_1 = require('../models/signup-dao');\nconst services_1 = require('../services');\nclass SignupController {\n    constructor(store, mailConfig, appConfig) {\n        this.Signup = new signup_dao_1.SignUpDAO(store, appConfig, mailConfig);\n    }\n    /**\n     * Valida o token do par칙metro\n     *\n     * @param {Request} req\n     * @param {Response} res\n     * @param {NextFunction} next\n     * @returns {JSData.JSDataPromise<any>}\n     *\n     * @memberOf SignupController\n     */\n    validaToken(req, res, next) {\n        return this.Signup.validaToken(req.params)\n            .then((dados) => {\n            res.status(200);\n            return dados;\n        })\n            .catch((err) => {\n            throw new services_1.APIError(err, 401);\n        });\n    }\n    /**\n     * Verifica o token e cadastra a senha para o usu치rio\n     *\n     * @param {Request} req\n     * @param {Response} res\n     * @param {NextFunction} next\n     * @returns {JSData.JSDataPromise<any>}\n     *\n     * @memberOf SignupController\n     */\n    registerPassword(req, res, next) {\n        return this.Signup.registerPassword(req.params, req.body)\n            .then((dados) => {\n            res.status(200);\n            return dados;\n        })\n            .catch((err) => {\n            throw new services_1.APIError(err, 401);\n        });\n    }\n}\nexports.SignupController = SignupController;\n","import { Request, Response, NextFunction } from 'express'\nimport { SignUpDAO } from '../models/signup-dao'\nimport { APIError } from '../services'\nimport * as JSData from 'js-data'\nimport {MailConfig} from '../config/mail-config'\nimport {AppConfig} from '../config/app-config'\n\nexport class SignupController {\n    Signup: SignUpDAO\n\n    constructor(store: JSData.DS, mailConfig: MailConfig, appConfig: AppConfig) {\n        this.Signup = new SignUpDAO(store,appConfig,mailConfig)\n    }\n\n    /**\n     * Valida o token do par칙metro\n     * \n     * @param {Request} req\n     * @param {Response} res\n     * @param {NextFunction} next\n     * @returns {JSData.JSDataPromise<any>}\n     * \n     * @memberOf SignupController\n     */\n    public validaToken(req: Request, res: Response, next: NextFunction): JSData.JSDataPromise<any> {\n        return this.Signup.validaToken(req.params)\n            .then((dados: any) => {\n                res.status(200)\n                return dados\n            })\n            .catch((err: any) => {\n                throw new APIError(err, 401)\n            })\n    }\n\n    /**\n     * Verifica o token e cadastra a senha para o usu치rio\n     * \n     * @param {Request} req\n     * @param {Response} res\n     * @param {NextFunction} next\n     * @returns {JSData.JSDataPromise<any>}\n     * \n     * @memberOf SignupController\n     */\n    public registerPassword(req: Request, res: Response, next: NextFunction): JSData.JSDataPromise<any> {\n        return this.Signup.registerPassword(req.params, req.body)\n            .then((dados: any) => {\n                res.status(200)\n                return dados\n            })\n            .catch((err: any) => {\n                throw new APIError(err, 401)\n            })\n    }\n}\n"]}