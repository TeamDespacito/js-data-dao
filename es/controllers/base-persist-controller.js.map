{"version":3,"sources":["src/controllers/base-persist-controller.js","src/controllers/base-persist-controller.ts"],"names":["services_1","require","BasePersistController","constructor","collection","find","req","res","next","params","id","user","then","reg","password","status","catch","error","APIError","findAll","query","regs","map","create","body","update","delete","isDeleted","paginatedQuery","page","limit","result","exports"],"mappings":"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","file":"base-persist-controller.js","sourcesContent":["\"use strict\";\nconst services_1 = require('../services');\nclass BasePersistController {\n    constructor(collection) {\n        this.collection = collection;\n    }\n    find(req, res, next) {\n        return this.collection.find(req.params.id, req.user)\n            .then(reg => {\n            delete reg.password;\n            res.status(200);\n            return reg;\n        })\n            .catch(error => {\n            throw new services_1.APIError(error, 400);\n        });\n    }\n    findAll(req, res, next) {\n        return this.collection.findAll(req.query, req.user)\n            .then(regs => {\n            regs.map(reg => {\n                delete reg.password;\n                return reg;\n            });\n            res.status(200);\n            return regs;\n        })\n            .catch(error => {\n            throw new services_1.APIError(error, 400);\n        });\n    }\n    create(req, res, next) {\n        return this.collection.create(req.body, req.user)\n            .then(reg => {\n            delete reg.password;\n            res.status(201);\n            return reg;\n        })\n            .catch(error => {\n            throw new services_1.APIError(error, 400);\n        });\n    }\n    update(req, res, next) {\n        return this.collection.update(req.params.id, req.body, req.user)\n            .then(reg => {\n            delete reg.password;\n            res.status(200);\n            return reg;\n        })\n            .catch(error => {\n            throw new services_1.APIError(error, 400);\n        });\n    }\n    delete(req, res, next) {\n        return this.collection.delete(req.params.id, req.user)\n            .then((isDeleted) => {\n            res.status(200);\n            return isDeleted;\n        })\n            .catch(error => {\n            throw new services_1.APIError(error, 400);\n        });\n    }\n    query(req, res, next) {\n        return this.collection.paginatedQuery(req.body, req.user, req.query.page, req.query.limit)\n            .then((result) => {\n            result.result.map(reg => {\n                delete reg.password;\n                return reg;\n            });\n            res.status(200);\n            return result;\n        })\n            .catch(error => {\n            throw new services_1.APIError(error, 400);\n        });\n    }\n}\nexports.BasePersistController = BasePersistController;\n","import * as JSData from 'js-data'\nimport { APIError } from '../services'\nimport { IDAO, IBaseModel, IResultSearch, IPersistController } from '../interfaces'\nimport { Request, Response } from 'express'\n\nexport class BasePersistController<T extends IBaseModel> implements IPersistController<T> {\n    collection: IDAO<T>\n    public constructor(collection: IDAO<T>) {\n        this.collection = collection\n    }\n    public find(req: Request, res: Response, next?: Function): JSData.JSDataPromise<T> {\n        return this.collection.find(req.params.id, req.user)\n            .then(reg => {\n                delete (reg as any).password\n                res.status(200)\n                return reg\n            })\n            .catch(error => {\n                throw new APIError(error, 400)\n            })\n    }\n\n    public findAll(req: Request, res: Response, next?: Function): JSData.JSDataPromise<T[]> {\n        return this.collection.findAll(req.query, req.user)\n            .then(regs => {\n                regs.map(reg => {\n                    delete (reg as any).password\n                    return reg\n                })\n                res.status(200)\n                return regs\n            })\n            .catch(error => {\n                throw new APIError(error, 400)\n            })\n    }\n\n    public create(req: Request, res: Response, next?: Function): JSData.JSDataPromise<T> {\n        return this.collection.create(req.body, req.user)\n            .then(reg => {\n                delete (reg as any).password\n                res.status(201)\n                return reg\n            })\n            .catch(error => {\n                throw new APIError(error, 400)\n            })\n    }\n\n    public update(req: Request, res: Response, next?: Function): JSData.JSDataPromise<T> {\n        return this.collection.update(req.params.id, req.body, req.user)\n            .then(reg => {\n                delete (reg as any).password\n                res.status(200)\n                return reg\n            })\n            .catch(error => {\n                throw new APIError(error, 400)\n            })\n    }\n\n    public delete(req: Request, res: Response, next?: Function): JSData.JSDataPromise<boolean> {\n        return this.collection.delete(req.params.id, req.user)\n            .then((isDeleted) => {\n                res.status(200)\n                return isDeleted\n            })\n            .catch(error => {\n                throw new APIError(error, 400)\n            })\n    }\n\n    public query(req: Request, res: Response, next?: Function): JSData.JSDataPromise<IResultSearch<T>> {\n        return this.collection.paginatedQuery(req.body, req.user, req.query.page, req.query.limit)\n            .then((result) => {\n                result.result.map(reg => {\n                    delete (reg as any).password\n                    return reg\n                })\n                res.status(200)\n                return result\n            })\n            .catch(error => {\n                throw new APIError(error, 400)\n            })\n    }\n}\n"]}