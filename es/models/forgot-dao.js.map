{"version":3,"sources":["src/models/forgot-dao.js","src/models/forgot-dao.ts"],"names":["service_lib_1","require","sendmail_1","Bluebird","_","ForgotDAO","constructor","store","mailConfig","appConfig","storedb","_appConfig","_sendMail","SendMail","_serviceLib","ServiceLib","sendForgotMail","obj","filterEmail","where","email","findAll","getUsersTable","then","users","isEmpty","emailValidator","user","head","token","generateToken","sendForgotEmail","name","validaToken","params","tokenDecrypted","decrypt","data","JSON","parse","today","Date","filterUser","expiration","active","password","resetPassword","length","all","hashPassword","resp","passwordEncrypted","update","id","exports"],"mappings":"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","file":"forgot-dao.js","sourcesContent":["\"use strict\";\nconst service_lib_1 = require('../services/service-lib');\nconst sendmail_1 = require('../services/sendmail');\nconst Bluebird = require('bluebird');\nconst _ = require('lodash');\nclass ForgotDAO {\n    constructor(store, mailConfig, appConfig) {\n        this.storedb = store;\n        this._appConfig = appConfig;\n        this._sendMail = new sendmail_1.SendMail(mailConfig);\n        this._serviceLib = new service_lib_1.ServiceLib(appConfig);\n    }\n    /**\n     * Envia um email para o usuário\n     *\n     * @param {IForgot} obj\n     * @returns {JSData.JSDataPromise<IBaseUser>}\n     *\n     * @memberOf ForgotDAO\n     */\n    sendForgotMail(obj) {\n        let filterEmail = { where: { email: { '===': obj.email } } };\n        return this.storedb.findAll(this._appConfig.getUsersTable(), filterEmail)\n            .then((users) => {\n            if (_.isEmpty(users)) {\n                throw 'Usuário não encontrado';\n            }\n            else if (!service_lib_1.ServiceLib.emailValidator(obj.email)) {\n                throw 'Email inválido';\n            }\n            let user = _.head(users);\n            let token = this._serviceLib.generateToken(obj.email);\n            return this._sendMail.sendForgotEmail(user.name, obj.email, `https://app.safetruck.com.br/auth/forgot/${token}`);\n        });\n    }\n    /**\n     * Valida o token e retorna o user com email do token\n     *\n     * @param {*} params\n     * @returns {JSData.JSDataPromise<IBaseUser>}\n     *\n     * @memberOf ForgotDAO\n     */\n    validaToken(params) {\n        let tokenDecrypted = this._serviceLib.decrypt(params.token);\n        let data = JSON.parse(tokenDecrypted);\n        let today = new Date();\n        let filterUser = {\n            where: {\n                email: {\n                    '===': data.email\n                }\n            }\n        };\n        return this.storedb.findAll(this._appConfig.getUsersTable(), filterUser)\n            .then((users) => {\n            let user = _.head(users);\n            if (_.isEmpty(user)) {\n                throw 'Token inválido';\n            }\n            else if (data.expiration < today) {\n                throw 'O token expirou';\n            }\n            else if (!user.active) {\n                throw 'A conta foi desativada';\n            }\n            delete user.password;\n            return user;\n        });\n    }\n    /**\n     * Verifica o token e reseta a senha do usuário\n     *\n     * @param {*} params\n     * @param {*} obj\n     * @returns {JSData.JSDataPromise<IBaseUser>}\n     *\n     * @memberOf ForgotDAO\n     */\n    resetPassword(params, obj) {\n        let data = JSON.parse(this._serviceLib.decrypt(params.token));\n        let today = new Date();\n        let filterUser = {\n            where: {\n                email: {\n                    '===': data.email\n                }\n            }\n        };\n        return this.storedb.findAll(this._appConfig.getUsersTable(), filterUser)\n            .then((users) => {\n            let user = _.head(users);\n            if (_.isEmpty(user)) {\n                throw 'Token inválido';\n            }\n            else if (data.expiration < today) {\n                throw 'O token expirou';\n            }\n            else if (!user.active) {\n                throw 'A conta foi desativada';\n            }\n            else if (!obj.password) {\n                throw 'A nova senha não foi definida';\n            }\n            else if (obj.password.length < 6) {\n                throw 'A nova senha deve conter no mínimo 6 caracteres';\n            }\n            return Bluebird.all([\n                user,\n                service_lib_1.ServiceLib.hashPassword(obj.password)\n            ]);\n        })\n            .then((resp) => {\n            let user = resp[0];\n            let passwordEncrypted = resp[1];\n            user.password = passwordEncrypted;\n            return this.storedb.update(this._appConfig.getUsersTable(), user.id, user);\n        })\n            .then(() => true);\n    }\n}\nexports.ForgotDAO = ForgotDAO;\n","import {IForgot, IBaseUser} from '../interfaces'\nimport {ServiceLib} from '../services/service-lib'\nimport {SendMail} from '../services/sendmail'\nimport * as Bluebird from 'bluebird'\nimport * as JSData from 'js-data'\nimport * as _ from 'lodash'\nimport {MailConfig} from '../config/mail-config'\nimport {AppConfig} from '../config/app-config'\n\nexport class ForgotDAO {\n    storedb: JSData.DS\n    private _sendMail: SendMail\n    private _serviceLib: ServiceLib\n    private _appConfig: AppConfig\n    constructor(store: JSData.DS, mailConfig: MailConfig, appConfig: AppConfig) {\n        this.storedb = store\n        this._appConfig = appConfig\n        this._sendMail = new SendMail(mailConfig)\n        this._serviceLib = new ServiceLib(appConfig)\n    }\n\n    /**\n     * Envia um email para o usuário\n     * \n     * @param {IForgot} obj\n     * @returns {JSData.JSDataPromise<IBaseUser>}\n     * \n     * @memberOf ForgotDAO\n     */\n    public sendForgotMail(obj: IForgot): any {\n        let filterEmail: any = { where: { email: { '===': obj.email } } }\n        return this.storedb.findAll<IBaseUser>(this._appConfig.getUsersTable(), filterEmail)\n            .then((users: Array<IBaseUser>) => {\n                if (_.isEmpty(users)) {\n                    throw 'Usuário não encontrado'\n                } else if (!ServiceLib.emailValidator(obj.email)) {\n                    throw 'Email inválido'\n                }\n                let user: IBaseUser = _.head(users)\n                let token: string = this._serviceLib.generateToken(obj.email)\n                return this._sendMail.sendForgotEmail(user.name,obj.email, `https://app.safetruck.com.br/auth/forgot/${token}`)\n            })\n    }\n\n    /**\n     * Valida o token e retorna o user com email do token\n     * \n     * @param {*} params\n     * @returns {JSData.JSDataPromise<IBaseUser>}\n     * \n     * @memberOf ForgotDAO\n     */\n    public validaToken(params: any): JSData.JSDataPromise<IBaseUser> {\n        let tokenDecrypted: string = this._serviceLib.decrypt(params.token)\n        let data: any = JSON.parse(tokenDecrypted)\n        let today: Date = new Date()\n        let filterUser: any = {\n            where: {\n                email: {\n                    '===': data.email\n                }\n            }\n        }\n        return this.storedb.findAll<IBaseUser>(this._appConfig.getUsersTable(), filterUser)\n            .then((users: Array<IBaseUser> ) => {\n                let user: IBaseUser = _.head(users)\n                if (_.isEmpty(user)) {\n                    throw 'Token inválido'\n                } else if (data.expiration < today) {\n                    throw 'O token expirou'\n                } else if (!user.active) {\n                    throw 'A conta foi desativada'\n                }\n                delete user.password\n                return user\n            })\n    }\n\n    /**\n     * Verifica o token e reseta a senha do usuário\n     * \n     * @param {*} params\n     * @param {*} obj\n     * @returns {JSData.JSDataPromise<IBaseUser>}\n     * \n     * @memberOf ForgotDAO\n     */\n    public resetPassword(params: any, obj: IBaseUser): JSData.JSDataPromise<boolean> {\n        let data: any = JSON.parse(this._serviceLib.decrypt(params.token))\n        let today: Date = new Date()\n        let filterUser: any = {\n            where: {\n                email: {\n                    '===': data.email\n                }\n            }\n        }\n        return this.storedb.findAll<IBaseUser>(this._appConfig.getUsersTable(), filterUser)\n            .then((users: Array<IBaseUser> ) => {\n                let user: IBaseUser = _.head(users)\n                if (_.isEmpty(user)) {\n                    throw 'Token inválido'\n                } else if (data.expiration < today) {\n                    throw 'O token expirou'\n                } else if (!user.active) {\n                    throw 'A conta foi desativada'\n                } else if (!obj.password) {\n                    throw 'A nova senha não foi definida'\n                } else if (obj.password.length < 6) {\n                    throw 'A nova senha deve conter no mínimo 6 caracteres'\n                }\n                return Bluebird.all([\n                    user,\n                    ServiceLib.hashPassword(obj.password)\n                ])\n            })\n            .then((resp: any) => {\n                let user: IBaseUser = resp[0]\n                let passwordEncrypted: string = resp[1]\n                user.password = passwordEncrypted\n                return this.storedb.update<IBaseUser>(this._appConfig.getUsersTable(), user.id, user)\n            })\n            .then(() => true)\n    }\n}\n"]}