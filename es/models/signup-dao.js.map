{"version":3,"sources":["src/models/signup-dao.js","src/models/signup-dao.ts"],"names":["Bluebird","require","_","mail_config_1","service_lib_1","SignUpDAO","constructor","store","appConfig","mailConfig","storedb","_appConfig","_mailConfig","MailConfig","_serviceLib","ServiceLib","validaToken","params","tokenDecrypted","decrypt","token","data","JSON","parse","today","Date","filterUser","where","email","findAll","getUsersTable","then","users","user","head","isEmpty","expiration","active","password","registerPassword","obj","length","all","hashPassword","resp","passwordEncrypted","update","id","exports"],"mappings":"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","file":"signup-dao.js","sourcesContent":["\"use strict\";\nconst Bluebird = require('bluebird');\nconst _ = require('lodash');\nconst mail_config_1 = require('../config/mail-config');\nconst service_lib_1 = require('../services/service-lib');\nclass SignUpDAO {\n    constructor(store, appConfig, mailConfig) {\n        this.storedb = store;\n        this._appConfig = appConfig;\n        this._mailConfig = new mail_config_1.MailConfig();\n        this._serviceLib = new service_lib_1.ServiceLib(appConfig);\n    }\n    /**\n     * Valida o token e retorna o user com email do token\n     *\n     * @param {*} params\n     * @returns {JSData.JSDataPromise<IBaseUser>}\n     * @memberOf SignUpDAO\n     */\n    validaToken(params) {\n        let tokenDecrypted = this._serviceLib.decrypt(params.token);\n        let data = JSON.parse(tokenDecrypted);\n        let today = new Date();\n        let filterUser = {\n            where: {\n                email: {\n                    '===': data.email\n                }\n            }\n        };\n        return this.storedb.findAll(this._appConfig.getUsersTable(), filterUser)\n            .then((users) => {\n            let user = _.head(users);\n            if (_.isEmpty(user)) {\n                throw 'Token inválido';\n            }\n            else if (data.expiration < today) {\n                throw 'O token expirou';\n            }\n            else if (!user.active) {\n                throw 'A conta foi desativada';\n            }\n            delete user.password;\n            return user;\n        });\n    }\n    /**\n     * Verifica o token e cadastra a senha para o usuário\n     *\n     * @param {*} params\n     * @param {*} obj\n     * @returns {JSData.JSDataPromise<IBaseUser>}\n     *\n     * @memberOf SignUpDAO\n     */\n    registerPassword(params, obj) {\n        let data = JSON.parse(this._serviceLib.decrypt(params.token));\n        let today = new Date();\n        let filterUser = {\n            where: {\n                email: {\n                    '===': data.email\n                }\n            }\n        };\n        return this.storedb.findAll(this._appConfig.getUsersTable(), filterUser)\n            .then((users) => {\n            let user = _.head(users);\n            if (_.isEmpty(user)) {\n                throw 'Token inválido';\n            }\n            else if (data.expiration < today) {\n                throw 'O token expirou';\n            }\n            else if (!user.active) {\n                throw 'A conta foi desativada';\n            }\n            else if (!obj.password) {\n                throw 'A senha não foi definida';\n            }\n            else if (obj.password.length < 6) {\n                throw 'A senha deve conter no mínimo 6 caracteres';\n            }\n            return Bluebird.all([\n                user,\n                service_lib_1.ServiceLib.hashPassword(obj.password)\n            ]);\n        })\n            .then((resp) => {\n            let user = resp[0];\n            let passwordEncrypted = resp[1];\n            user.password = passwordEncrypted;\n            return this.storedb.update(this._appConfig.getUsersTable(), user.id, user);\n        })\n            .then(() => true);\n    }\n}\nexports.SignUpDAO = SignUpDAO;\n","import { IBaseUser } from '../interfaces'\nimport * as Bluebird from 'bluebird'\nimport * as JSData from 'js-data'\nimport * as _ from 'lodash'\nimport {AppConfig} from '../config/app-config'\nimport {MailConfig} from '../config/mail-config'\nimport {ServiceLib} from '../services/service-lib'\n\nexport class SignUpDAO {\n    storedb: JSData.DS\n    private _mailConfig: MailConfig\n    private _serviceLib: ServiceLib\n    private _appConfig: AppConfig\n    constructor(store: JSData.DS, appConfig: AppConfig, mailConfig: MailConfig) {\n        this.storedb = store\n        this._appConfig = appConfig\n        this._mailConfig = new MailConfig()\n        this._serviceLib = new ServiceLib(appConfig)\n    }\n\n    /**\n     * Valida o token e retorna o user com email do token\n     * \n     * @param {*} params\n     * @returns {JSData.JSDataPromise<IBaseUser>}\n     * @memberOf SignUpDAO\n     */\n    public validaToken(params: any): JSData.JSDataPromise<IBaseUser> {\n        let tokenDecrypted: string = this._serviceLib.decrypt(params.token)\n        let data: any = JSON.parse(tokenDecrypted)\n        let today: Date = new Date()\n        let filterUser: any = {\n            where: {\n                email: {\n                    '===': data.email\n                }\n            }\n        }\n        return this.storedb.findAll<IBaseUser>(this._appConfig.getUsersTable(), filterUser)\n            .then((users: Array<IBaseUser> ) => {\n                let user: IBaseUser = _.head(users)\n                if (_.isEmpty(user)) {\n                    throw 'Token inválido'\n                } else if (data.expiration < today) {\n                    throw 'O token expirou'\n                } else if (!user.active) {\n                    throw 'A conta foi desativada'\n                }\n                delete user.password\n                return user\n            })\n    }\n\n    /**\n     * Verifica o token e cadastra a senha para o usuário\n     * \n     * @param {*} params\n     * @param {*} obj\n     * @returns {JSData.JSDataPromise<IBaseUser>}\n     * \n     * @memberOf SignUpDAO\n     */\n    public registerPassword(params: any, obj: any): JSData.JSDataPromise<boolean> {\n        let data: any = JSON.parse(this._serviceLib.decrypt(params.token))\n        let today: Date = new Date()\n        let filterUser: any = {\n            where: {\n                email: {\n                    '===': data.email\n                }\n            }\n        }\n        return this.storedb.findAll<IBaseUser>(this._appConfig.getUsersTable(), filterUser)\n            .then((users: Array<IBaseUser> ) => {\n                let user: IBaseUser = _.head(users)\n                if (_.isEmpty(user)) {\n                    throw 'Token inválido'\n                } else if (data.expiration < today) {\n                    throw 'O token expirou'\n                } else if (!user.active) {\n                    throw 'A conta foi desativada'\n                } else if (!obj.password) {\n                    throw 'A senha não foi definida'\n                } else if (obj.password.length < 6) {\n                    throw 'A senha deve conter no mínimo 6 caracteres'\n                }\n                return Bluebird.all([\n                    user,\n                    ServiceLib.hashPassword(obj.password)\n                ])\n            })\n            .then((resp: any) => {\n                let user: IBaseUser = resp[0]\n                let passwordEncrypted: string = resp[1]\n                user.password = passwordEncrypted\n                return this.storedb.update<IBaseUser>(this._appConfig.getUsersTable(), user.id, user)\n            })\n            .then(() => true)\n    }\n}\n"]}