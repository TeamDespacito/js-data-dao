{"version":3,"sources":["src/routes/base-router.js","src/routes/base-router.ts"],"names":["express_1","require","BaseRouter","respond","t","res","then","u","json","catch","err","status","statusCode","error","exports","PersistRouter","constructor","store","controller","router","Router","routers","ctrl","get","req","next","findAll","find","post","create","put","update","delete","query","getRouter"],"mappings":"AAAA;;ACAA,MAAAA,YAAAC,QAAiC,SAAjC,CAAA;AAMA,MAAAC,UAAA,CAAA;AACIC,YAASC,CAAT,EAAwCC,GAAxC,EAAqD;AACjD,eAAOD,EACNE,IADM,CACAC,CAAD,IAAOF,IAAIG,IAAJ,CAASD,CAAT,CADN,EAENE,KAFM,CAECC,GAAD,IAAmBL,IAAIM,MAAJ,CAAWD,IAAIE,UAAf,EAA2BJ,IAA3B,CAAgCE,IAAIG,KAApC,CAFnB,CAAP;AAGH;AALL;AAAaC,QAAAZ,UAAA,GAAUA,UAAV;AAQb,MAAAa,aAAA,SAA0Fb,UAA1F,CAAoG;AAIhGc,gBAAaC,KAAb,EAA+BC,UAA/B,EAA4C;AACxC;AACA,aAAKA,UAAL,GAAkBA,UAAlB;AACA,aAAKC,MAAL,GAAcnB,UAAAoB,MAAA,EAAd;AACA,aAAKC,OAAL;AACH;AAEMA,cAAO;AACV,YAAIC,OAAO,KAAKJ,UAAhB;AACA;AACA,aAAKC,MAAL,CAAYI,GAAZ,CAAgB,GAAhB,EAAqB,CAACC,GAAD,EAAMnB,GAAN,EAAWoB,IAAX,KAAoB,KAAKtB,OAAL,CAAamB,KAAKI,OAAL,CAAaF,GAAb,EAAkBnB,GAAlB,EAAuBoB,IAAvB,CAAb,EAA0CpB,GAA1C,CAAzC;AAEA;AACA,aAAKc,MAAL,CAAYI,GAAZ,CAAgB,MAAhB,EAAwB,CAACC,GAAD,EAAMnB,GAAN,EAAWoB,IAAX,KAAoB,KAAKtB,OAAL,CAAamB,KAAKK,IAAL,CAAUH,GAAV,EAAenB,GAAf,EAAoBoB,IAApB,CAAb,EAAuCpB,GAAvC,CAA5C;AAEA;AACA,aAAKc,MAAL,CAAYS,IAAZ,CAAiB,GAAjB,EAAsB,CAACJ,GAAD,EAAMnB,GAAN,EAAWoB,IAAX,KAAoB,KAAKtB,OAAL,CAAamB,KAAKO,MAAL,CAAYL,GAAZ,EAAiBnB,GAAjB,EAAsBoB,IAAtB,CAAb,EAAyCpB,GAAzC,CAA1C;AAEA;AACA,aAAKc,MAAL,CAAYW,GAAZ,CAAgB,MAAhB,EAAwB,CAACN,GAAD,EAAMnB,GAAN,EAAWoB,IAAX,KAAoB,KAAKtB,OAAL,CAAamB,KAAKS,MAAL,CAAYP,GAAZ,EAAiBnB,GAAjB,EAAsBoB,IAAtB,CAAb,EAAyCpB,GAAzC,CAA5C;AAEA;AACA,aAAKc,MAAL,CAAYa,MAAZ,CAAmB,MAAnB,EAA2B,CAACR,GAAD,EAAMnB,GAAN,EAAWoB,IAAX,KAAoB,KAAKtB,OAAL,CAAamB,KAAKU,MAAL,CAAYR,GAAZ,EAAiBnB,GAAjB,EAAsBoB,IAAtB,CAAb,EAAyCpB,GAAzC,CAA/C;AAEA;AACA,aAAKc,MAAL,CAAYS,IAAZ,CAAiB,QAAjB,EAA2B,CAACJ,GAAD,EAAMnB,GAAN,EAAWoB,IAAX,KAAoB,KAAKtB,OAAL,CAAamB,KAAKW,KAAL,CAAWT,GAAX,EAAgBnB,GAAhB,EAAqBoB,IAArB,CAAb,EAAwCpB,GAAxC,CAA/C;AACH;AAEM6B,gBAAS;AACZ,eAAO,KAAKf,MAAZ;AACH;AAlC+F;AAAvFL,QAAAC,aAAA,GAAaA,aAAb","file":"base-router.js","sourcesContent":["\"use strict\";\nconst express_1 = require('express');\nclass BaseRouter {\n    respond(t, res) {\n        return t\n            .then((u) => res.json(u))\n            .catch((err) => res.status(err.statusCode).json(err.error));\n    }\n}\nexports.BaseRouter = BaseRouter;\nclass PersistRouter extends BaseRouter {\n    constructor(store, controller) {\n        super();\n        this.controller = controller;\n        this.router = express_1.Router();\n        this.routers();\n    }\n    routers() {\n        let ctrl = this.controller;\n        /* GET lista todos os registros da classe corrente em controller. */\n        this.router.get('/', (req, res, next) => this.respond(ctrl.findAll(req, res, next), res));\n        /* GET busca o registro com o id. */\n        this.router.get('/:id', (req, res, next) => this.respond(ctrl.find(req, res, next), res));\n        /* POST cria um novo registro da classe corrente em controller. */\n        this.router.post('/', (req, res, next) => this.respond(ctrl.create(req, res, next), res));\n        /* PUT atualiza o registro. */\n        this.router.put('/:id', (req, res, next) => this.respond(ctrl.update(req, res, next), res));\n        /* DELETE deleta o registro com o id. */\n        this.router.delete('/:id', (req, res, next) => this.respond(ctrl.delete(req, res, next), res));\n        /* POST lista paginada com os registros da classe corrente em controller. */\n        this.router.post('/query', (req, res, next) => this.respond(ctrl.query(req, res, next), res));\n    }\n    getRouter() {\n        return this.router;\n    }\n}\nexports.PersistRouter = PersistRouter;\n","import { Response, Router } from 'express'\nimport { APIError } from '../services/api-error'\nimport { IBaseModel } from '../interfaces'\nimport { IPersistController } from '../interfaces'\nimport * as JSData from 'js-data'\n\nexport class BaseRouter {\n    respond (t: JSData.JSDataPromise<any> , res: Response): JSData.JSDataPromise<Response> {\n        return t\n        .then((u) => res.json(u))\n        .catch((err: APIError) => res.status(err.statusCode).json(err.error))\n    }\n}\n\nexport class PersistRouter<M extends IBaseModel, C extends IPersistController<M>> extends BaseRouter {\n    controller: C\n    router: Router\n\n    constructor (store: JSData.DS, controller: C) {\n        super()\n        this.controller = controller\n        this.router = Router()\n        this.routers()\n    }\n\n    public routers() {\n        let ctrl = this.controller\n        /* GET lista todos os registros da classe corrente em controller. */\n        this.router.get('/', (req, res, next) => this.respond(ctrl.findAll(req, res, next),res))\n\n        /* GET busca o registro com o id. */\n        this.router.get('/:id', (req, res, next) => this.respond(ctrl.find(req, res, next),res))\n\n        /* POST cria um novo registro da classe corrente em controller. */\n        this.router.post('/', (req, res, next) => this.respond(ctrl.create(req, res, next),res))\n\n        /* PUT atualiza o registro. */\n        this.router.put('/:id', (req, res, next) => this.respond(ctrl.update(req, res, next),res))\n\n        /* DELETE deleta o registro com o id. */\n        this.router.delete('/:id', (req, res, next) => this.respond(ctrl.delete(req, res, next),res))\n\n        /* POST lista paginada com os registros da classe corrente em controller. */\n        this.router.post('/query', (req, res, next) => this.respond(ctrl.query(req, res, next),res))\n    }\n\n    public getRouter(): Router {\n        return this.router\n    }\n}\n"]}